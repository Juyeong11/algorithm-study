
#include<iostream>

using namespace std;
void func()
{
	cout<<"정적"<<endl;
}

namespace A
{
	void func()
	{
		cout<<"namespace"<<endl;
	}
}
class Point
{
	public:
	void func()
	{
		cout<<"멤버"<<endl;
	}
	static void func_1()
	{
		cout<<"static정적"<<endl;
	}
	
	explicit Point(int _x = 0, int _y = 0) : x(_x), y(_y){}
	void Print() const{cout<<x<<" ,"<<y<<endl;}
	void PrintInt(int n){ cout<<"테스트 정수 : " << n << endl;}
	private:
	int x;
	int y;
};

/////////////////////////////////////////////////콜백 함수 예제


//서비스를 제공하는 코드측을 서버 제공 받는 코드측을 클라이언트라함
//서버가 미리 client()함수를 알고 호출하는 것은 불가능
//그래서 서버에 클라이언트 정보를 제공하는 방법 중 하나가
//함수 포인터 매개변수를 이용해 콜백 함수의 주소를 전달하는 방법

//서버
//배열의 모든 원소에 반복적인 작업을 수행하게 추상화됨(구체적인 작업없음)
void For_each(int* begin, int* end, void (*pf)(int))
{
	while(begin != end)
	{
		pf(*begin++);
	}
}

//클라이언트
void Print1(int n)
{
	cout<<n<<' ';
}
void Print2(int n)
{
	cout<<n*n<<' ';
}
void Print3(int n)
{
	cout<<"정수 : "<<n<<endl;
}

int main()
{
	//정적 함수 호출
	/* 예제 1
	void (*f)();
	
	f=func;
	
	func();
	f();
	(*f)();
	*/
	
	/*예제 2
	Point pt;
	Point *p = &pt;
	
	func();
	pt.func();
	p->func();
	*/
	
	//멤버 함수 객체로 호출
	/*예제 3
	void (*pf)();
	
	func();
	A::func();
	Point::func_1();
	
	pf = func;
	pf();
	pf = A::func;
	pf();
	pf =Point::func_1;
	pf();
	*/
	
	//멤버함수 주소로 호출
	/*예제 4
	Point pt(2,3);
	Point *p = &pt;
	
	void (Point::*pf1)() const;
	pf1 = &Point::Print;
	
	void (Point::*pf2)(int);
	pf2 = &Point::PrintInt;
	
	pt.Print();
	pt.PrintInt(10);
	cout<<endl;
	
	//함수 호출 시 연산자 우선순위로 인해 *,->* 연산자 사이에 () 연산자를 사용
	
	//객체로 멤버 함수 호출
	(pt.*pf1)();
	(pt.*pf2)(10);
	cout<<endl;
	
	//주소로 멤버 함수 호출
	(p->*pf1)();
	(p->*pf2)(10);
	*/

	//콜백 함수 예제

	int arr[5] = {10,20,30,40,50};
	
	For_each(arr, arr+5, Print1);
	cout<<endl<<endl;
	
	For_each(arr, arr+5, Print2);
	cout<<endl<<endl;
	
	For_each(arr, arr+5, Print3);
	cout<<endl<<endl;
	return 0;
}





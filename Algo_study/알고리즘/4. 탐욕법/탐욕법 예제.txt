탐욕적인 알고리즘은 우리가 원하는 답을 재귀 호출과 똑같이 여러 개의 조각으로 쪼개고,
각 단게마다 답의 한 부분을 만들어 간다는 점에서 완전 탐색,동적 계회법알고리즘과 다를 것이 없다.
그러나 탐욕법은 각 단계마다 지금 당장 가장 좋은 방법만을 선택한다.

탐욕적 알고리즘은 많은 경우 최적해를 찾지 못한다. 따라서 탐욕적 알고리즘이 사용되는 경우는 크게 두 가지로 정리된다.

- 탐욕법을 사용해도 항상 최적해를 구할 수 있는 문제를 만난 경우, 탐욕법은 동적 계획법보다 수행 시간이 훨씬 빠르기 때문에 유용하다.

- 시간이나 공간적 제약으로 인해 다른 방법으로 최적해를 찾기 너무 어렵다면 최적해 대신 근사해를 찾는 것으로 타협 할 경우



#include<iostream>
#include<vector>
using namespace std;

int main()
{
	
}
문제 회의실 예약

서로의 팀이 시간이 ?곂치지 않게 회의를 선택할 때 최대로 선택할 수 있는 개수

* 가장 종료시간이 빠른 회의를 포함하는 최적해가 반드시 존재 한다.
int schedule()
{
	vector<pair<int,int>> order;
	
	for(int i=0;i<n;++i)
		order.push_back(make_pair(end[i],begin[i]));
	sort(order.begin(), order.end());
	
	int earliest = 0, selected = 0;
	for(int i = 0; i < order.size(); ++i)
	{
		int meetingBegin = order[i].second, meetingEnd = order[i].first;
		
		if(earliest <= meetingBegin)
		{
			earliest = meetingEnd;
			++selected;
		}
	}
	return selected;
}
// 맨 앞경기 부터 한명씩 출전할 한국선수를 정한다.
// 상대방선수를 이길 수 있는 한국 선수가 있을 경우 그 중 레이팅이 가장 낮은 선수를 경기 시킨다.
// 
// 이 알고리즘의 정당성을 증명하기 위해 우리가 하는 선택을 포함하는 최적해가 존재함을 증명하자.
// ㅔ374페이지 ㅋ

// 최대 승리수를 가지는 경우 찾기
// 멀티셋 -> 균형 이진 트리 왜 쓰는거지?20.3.17
int order(const vector<int>& russian, const vector<int>& korean)
{
	int n = russian.size(), wins = 0;
	//남아있는 선수들 레이팅
	multiset<int> ratings(korean.begin(), korean.end());
	for(int rus = 0; rus < n; ++rus){
		//가장 레이팅이 높은 한국 선수가 이길 수 없는 경우
		//가장 레이팅이 낮은 선수와 경기 시킨다.
		if(*ratings.rbegin()<russian[rus])
			ratings.erase(ratings.begin());
		else
		{
			ratings.erase(ratings.lower_bound(russian[rus]));
			++wins;
		}
	}
	return wins;
}

//* 탐욕적 선택 속성을 증명하는 패턴
// - 항상 우리가 선택한 방법을 포함하는 최적해가 있음을 증명하기 위해
//   우선 우리가 서낵한 방법을 포함하지 않는 최적해의 존재를 가정합니다.
//   그리고 이것을 적절히 조작해 우리가 선택한 방법을 포함하는 최적해를 만들어 냅니다.
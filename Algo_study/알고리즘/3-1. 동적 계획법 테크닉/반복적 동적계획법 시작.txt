//반복적 동적 계획법
// 부분 문제간의 의존성을 파악하기 쉬울 경우에는 반복문을 통해서 동적계획법을 구현가능하다.
//예제 삼각형 위의 최대 경로를 반복적 동적계획법(재귀를 반복문으로 바꿈)으로 푼 코드
int n, triangle[100][100];
int C[100][100];
int iterative()
{
	for(int x=0;x<n;++x)
		C[n-1][x] = triangle[n-1][x];//기저사례인 밑 부분을 계산 한다.
	
	for(int y = n-2;y>=0;--y)
		for(int x = 0;x<y+1;++x)
			C[y][x] = max(C[y+1][x], C[y+1][x+1])+triangle[y][x];//기저 사례부터 올라가면서 최대합 경로를 찾는다.
	return C[0][0]
}

//슬라이딩 윈도 테크닉
// 사용하는 전체의 데이터를 메모리에 유지하는 것이 아니라 필요한 부분만 저장하는 기법
int C[2][100];
int iterative()
{
	for(int x=0;x<n;++x)
		C[(n-1)%2][x] = triangle[n-1][x];//기저사례인 밑 부분을 계산 한다.
	
	for(int y = n-2;y>=0;--y)
		for(int x = 0;x<y+1;++x)
			//기저 사례부터 올라가면서 최대합 경로를 찾는다.
			//높이값이 0과 1로 바뀌면서 필요한 부분만 저장한다 
			C[y%2][x] = max(C[(y+1)%2][x], C[(y+1)%2][x+1])+triangle[y][x];
	return C[0][0]
}

//행렬 거듭제곱을 이용한 동적계획법
//선형 변환 형태의 점화식을 형렬을 이용해 빠르게 푸는 기법
int fib(int n)
{
	if(n<=1) return n;
	int seq[3];
	seq[0] = 0;
	seq[1] = 1;
	//Ci  = | fib(i-1)|
	//		| fib(i)  |
	
	//Ci+1= | fib(i)		   | -->| 0 1|
	//		| fib(i-1) + fib(i)|    | 1 1| Ci  행렬의 곱으로 나타낼 수 있다.
	//fib(n) = W (n-1 1,1) 이다
	for(int i= 2;i <= n; ++i)
		seq[i%3] = (seq[(i-1) % 3] + seq[(i-2) % 3]) % 100000;
	return seq[n%3];
}

int fib3(int n)
{
	if(n==0) return 0;
	SquareMatrix W(2);//7.1예제 빠른 행렬 곱셈
	W[0][0] = 0;
	W[0][1] = W[1][0] = W[1][1] = 1;
	return pow(W,n-1)[1][1];//W (n-1 1,1)
}

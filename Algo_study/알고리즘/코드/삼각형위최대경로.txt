#include<iostream>
#include<random>
#include<cstring>
using namespace std;
int path(int y,int x);

int n, triangle[100][100];
int cache[100][100];
 int a=0;

int main()
{
	n=6;
	random_device rn;
	mt19937_64 rnd(rn());
	
	uniform_int_distribution<int> range(0,100);
	
	for(int i = 0;i<100;++i)
		for(int j=0;j<100;++j)
			triangle[i][j] = range(rnd);

	memset(cache,-1,sizeof(cache));
	
	cout<<path(0,0)<<endl;
	cout<<a;
}

int path(int y,int x)
{
	
	if(y == n-1) return triangle[y][x];
	a++;
	int& ret = cache[y][x];
	if(ret != -1) return ret;   
	
	return ret = max(path(y+1,x+1),path(y+1,x)) + triangle[y][x];
}


//삼각형위의 최대경로
/*
	메모이제이션을 이용하지 않으면 2^n 개의 갯수를 모두 순회

	 위에서 부터 계산하면 중복되는 계산이 없지만
	아래에서 부터 생각해보면 중복되는 계산이 있다
	그러므로 아랫부분에서 계산된 값의 최댓값만 가지고 있으면 다시 계산할 이유가 없다!
*/
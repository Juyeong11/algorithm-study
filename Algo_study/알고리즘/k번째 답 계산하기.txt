#include<iostream>
#include<string>
using namespace std;


//k번째 답계산하기

//모든 신호 만들기
//모든 신호를 사전순서대로 만드는 완전 탐색 알고리즘
void generate(int n, int m, string s)
{
	if(n==0 && m==0)
	{
		cout<<s<<endl;
		return;
	}
	if(n>0) generate(n-1,m,s + "-");
	if(m>0) generate(n,m-1,s + "o");
}

//n개의 장점과 m개의 단점으로 구성
//k-1개 건너뛰기

void generate_jump(int n, int m, string s)
{
	static int skip = 20;
	if(skip < 0) return;
	
	if(n==0 && m==0)
	{
		if(skip ==0) cout<<s<<endl;
		skip--;
		return;
	}
	if(n>0) generate_jump(n-1,m,s + "-");
	if(m>0) generate_jump(n,m-1,s + "o");
}
//필요한 모든이항계수를 미리 계산해보고 건너뛰어야하는 갯수가 만들 수 있는 답의 수보다 많으면 그냥 skip만 줄이고 return하는 방법도 있다
//이항계수를 미리 계산할 때는 오버플로를 주의하자 

const int M = 1000000000;
int bino[201][201];
void calcBino()
{
	memset(bino,0,sizeof(bino));
	for(int i=0li<200;++i)
	{
		bino[i][0] = bino[i][i] =1;
		for(int j = 1;j<i;++j)
			bino[i][j] = min(M, bino[i-1][j-1]+bino[i-1][j]);
	}
}
//if(bino[n+m][n]<=skip)
//	skip -= bino
//	return;
//O(nm)의 시간이 걸림


//n개의 장점과 m개의 단점으로 구성된신호중 skip개를 건너뛰고 제일 먼저오는신호를 반환하는 함수kth
//O(n+m)
string kth(int n,int m,int skip)
{
	if(n==0) return string(m,'o');
	if(skip<bino[n+m-1][n-1])
		return "-"+kth(n-1,m,skip);
	return "o"+kth(n,m-1,skip - bino[n+m-1][n-1]);
}

int main()
{
	string s("");
	generate_jump(5,5,s);
}


1.
 답들을 사전순서대로 만들며 경우의 수를 세는 완전 탐색 알고리즘을 설계 하고,
메모이제이션을 적용해 경우의 수를 세는 동적 계획법 알고리즘으로 바꿉니다.

2.
 모든 답들을 사전순으로 생성하며 skip개를 건너뛰고 첫 번째 답을 반환하는 재귀 호출 함수를 구현합니다.
재귀 함수는 각 조각들에 들어갈 수 있는 값을 하나씩 고려하면서 이 값을 선택했을 때 만들어지는 답의 수
M과 건너 뛰어야 할 답의 수 skip을 M만큼 줄입니다.

a)M<=skip M개의 답은 모두 우리가 원하는 답보다 앞에 있으므로 이들은 건너뛴다 skip은 M만큼 줄임

b)M>skip M개의 답중에 원하는 답이 있으므로 이 값을 선택 M개중에 skip개를 건너뛴것이 우리가 원하는 답이다
이값을 답에 추가하고 재귀 호출로 답의 나머지 부분을 만듭니다.
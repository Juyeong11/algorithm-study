최소화 해야 할 값 
-> 먹는 시간이 긴것
max(e+ ∑p)

탐욕적 선택 속성 증명
- 도시락의 목록이 주어질 때 먹는데 가장 오래 걸리는 도시락을
제일 먼저 데우는 최적해가 반드시 하나는 있음을 보여주면 됨

최적 부분 구조 증명
- 남은 도시락들에 대해서도 가장 늦게 다 먹는 시간을
최소화해서 손해 볼 것은 없다.


#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;
int lunch_time();

int n = 3;
//도시락을 데우는데 걸리는 시간
int m[10000] = {1,2,3,};
//도시락을 먹는ㄷ 걸리는 시간
int e[10000] = {1,2,1,};
int main()
{
	cout<<lunch_time()<<endl;
}
int lunch_time()
{
	//먹는ㄷ 걸리는 시간을 역순으로 정령하기  위해 pair를 이용
	vector<pair<int,int>> order;
	for(int i = 0; i<n; ++i)
		order.push_back(make_pair(-e[i],i));
	
	sort(order.begin(), order.end());
	
	int ret = 0, beginEat = 0;
	for(int i = 0; i<n; ++i)
	{
		int box = order[i].second;
		beginEat += m[box];
		ret = max(ret, beginEat+e[box]);
	}
	
	return ret;
}
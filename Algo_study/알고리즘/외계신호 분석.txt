#include<iostream>
#include<cmath>
#include<vector>
#include<queue>
using namespace std;

int main()
{
	vector<long long> A;
	A.push_back(1983);
	int N = 5000;
	int K = 5265;
	const long long num = pow(2,32);
	for(int i=1; i<N; ++i)
		A.push_back((A[i-1]*214013+2531011) % num );
	
	int k_sum = 0;
	int head = 0;
	int tail = 0;
	int ret=0;
	for(int i=0;i<A.size();++i)
	{
		int signal = (A[i] % 10000) + 1;
		
		
		if(k_sum > K)
		{
			while(k_sum > K)
				k_sum -= (A[head++]%10000) + 1;
		}
		else if(k_sum == K)
		{
			k_sum -= (A[head++]%10000) + 1;
			++ret;
			
		}
		k_sum += signal;
		
		cout<<k_sum<<" ";
	}
	
	cout<<ret<<endl;
}

struct RNG{//내부적으로 unsigned자료형을 사용함으로써 2^32로 나눈 나머지를 취하는 연산을 할 필요가 없다.
	unsigned seed;
	RNG() : seed(1983){}
	unsigned next()
	{
		unsigned ret = seed;
		seed = ((seed * 214013u) + 2531011u);
		return ret % 10000 + 1;//함수로 만들어 반환값을 나눠준다는 생각을 못했다.
}
//신호 분석 온라인 알고리즘
int countRanges(int k, int n)
{
	//RNG rng;//신호값을 생성하는 난수 생성기
	queue<int> range;
	int ret = 0, rangeSum = 0;
	for(int i = 0; i < n; ++i)
	{
		int newSignal = rng.next();
		rangeSum += newSignal;
		range.push(newSignal);
		
		while(rangeSum > k)
		{
			rangeSum -= range.front();
			range.pop();
		}
		
		if(rangeSum == k) ret++;
	}
	return ret;
}

//
int optimized(const vector<int>& signals, int k)
{
	int ret = 0, tail = 0, rangeSum = signals[0];
	for(int head = 0; head < signals.size(); ++head)
	{
		//Sum이 k보다 커질때 까지 더한다.
		while(rangeSum < k && tail + 1 < signals.size())//코드의 진행 순서만 생각해줘도 내가 짠 코드보다 더 간결해질 수 있네요
			rangeSum += signals[++tail];
		
		if(rangeSum == k) ret++;
		
		//head를 옮기면서 빼준다.
		reangeSum -= signals[head];
	}
	return ret;
}
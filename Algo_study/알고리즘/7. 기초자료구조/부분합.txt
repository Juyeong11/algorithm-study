부분합

- 배열의 각 위치에 대해 배열의 시작부터 현재 위치까지의 원소의 합을 구해 둔 배열

ex) 각 반의 성적 평균을 구한다고 했을 떼 함수를 실행 시킬때 마다 평균O(n)을 구한다면
    평균값을 미리 계산해 저장해놓고 호출시에 읽어 오는 것이 실행 시간O(1)이 빠르다.

vector<int> partialSum(const vector<int>& a)
{
	vector<int> ret(a.size());
	ret[0] = a[0];
	for(int i = 1; i < a.size(); ++i)
		ret[i] = ret[i-1] + a[i];
	return ret;
}

int rangeSum(const vector<int>& psum, int a, int b)
{
	if(a == 0) return psum[b];
	return psum[b] - psum[a-1];
}

Quantization문제를 찾아보면 잘 알 수 있다.

부분합은 1차원 배열뿐만 아니라 2차원 배열에서도 사용할 수 있다.

sum(y1,x1,x2,y2) = psum[y2,x2] - psum[y2,x1-1] - psum[y1 - 1, x2] + psum[y1 - 1, x1 -1 ]

int gridSum(const vector<vector<int>>& psum, int y1, int x1, int y2, int x2)
{
	int ret = psum[y2][x2];
	if(y1 > 0) ret -= psum[y1-1][x2];
	if(x1 > 0) ret -= psum[y2][x1-1];
	if(y1 > 0 && x1 > 0) ret += psum[y1-1][x1-1];
	return ret;
}


이렇게 유용하게 사용할 수 있으니 비슷한 경우가 있다면 한번 고려해보도록 하자
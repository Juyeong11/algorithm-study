#include<iostream>
#include<vector>
using namespace std;
int wayToBuy(const vector<int>& psum, int k);
int maxBuy(const vector<int>& psum, int k);


int D[6] = {1,2,3,4,5,6};
int N = 6;
int K =4;
void D_psum(vector<int>& psum)
{
	psum.push_back(D[0] % K);
	for(int i=1; i < N; ++i)
		psum.push_back( (D[i] + psum[i])  % K);
}
int main()
{
	vector<int> psum(1,0);//첫번째 원소 이전에 0을 하나 추가로 집어 넣는다.
	D_psum(psum);
	
	cout<<wayToBuy(psum, K)<<endl;
	cout<<maxBuy(psum, K)<<endl;
	
	for(int a: psum)
		cout<<a<<" ";
	cout<<endl;
}

int wayToBuy(const vector<int>& psum, int k)
{
	const int MOD = 20091101;
	int ret = 0;
	vector<long long> count(k, 0);
	for(int i = 0; i < psum.size(); ++i)
		count[psum[i]]++;

	for(int i =0; i < k; ++i)
		if(count[i] >= 2)
			ret = (ret + ((count[i] * (count[i] - 1)) / 2 )) % MOD;//-> 조합 공식 n개 중에 2개를 뽑는다 (n*(n-1))/2!
	return ret;
}

int maxBuy(const vector<int>& psum, int k)//한번 상자를 사면 그 안에 있는 인형을 남는거 없이 나누어 줘야됨
{
	vector<int> ret(psum.size(), 0);
	
	vector<int> prev(k, -1);
	for(int i = 0; i<psum.size(); ++i)
	{
		if(i>0)
			ret[i] = ret[i-1];
		else
			ret[i] = 0;
		
		int loc = prev[psum[i]];//전에도 본적이 있는가, 전에도 나왔던 숫자인가?
		if(loc != -1) ret[i] = max(ret[i], ret[loc] + 1);
		
		prev[psum[i]] = i;
	}
	
	return ret.back();
}
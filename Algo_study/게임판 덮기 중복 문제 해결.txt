#include<iostream>
#include<cstring>

int cover(int[][7]);

using namespace std;

int H=0;//행
int W=0;//열
char board[20][20]={"\0",};
int _board[20][20]={-1,};

const int _x[4]={-1,-1, 1,1};//┐,┘,└,┌
const int _y[4]={ 1,-1,-1,1};

const int x_1[4]={1,-1,0,1};
const int x_2[4]={0,0,1,1};
const int x_3[4]={0,0,0,0};
const int y_1[4]={0,1,1,1};
const int y_2[4]={1,1,1,0};
const int y_3[4]={0,0,0,0};
int main()
{
	int test_case=0;
	/* 예제 입력
	cin>>H>>W;
	
	for(int i=0;i<H;i++)
		cin>>board[i];
		
	for(int i=0;i<H;++i)
		for(int j=0;j<W;++j)
		{
			if(strcmp(board[i][j],"#"))
				_board[i][j]=0;
			elseif(strcmp(board[i][j],"."))
				_board[i][j]=1;
		}
	*/

	H=3;
	W=7;
	int tmp_board[3][7]={
		
		{0,1,1,1,1,1,0},
		{0,1,1,1,1,1,0},
		{0,0,1,1,0,0,0}
		
	};
	
	cout<<cover(tmp_board)<<endl;
}

int cover(int tmp_board[][7])
{
	int x=-1,y=-1;
	int count_white=0;
	
	for(int y=0;y<H;++y)
		for(int x=0;x<W;++x)
			if(tmp_board[y][x]==1)
			{
				++count_white;
			}
	
	if(count_white%3 != 0)//1. 기저사례
	{
		cout<<endl;
	}
	
	if(count_white == 0)
	{
		return 1;
	}
	
	for(int tmp_y=0;tmp_y<H;++tmp_y)//비어있는 블록을 찾음
	{
		for(int tmp_x=0;tmp_x<W;++tmp_x)
		{
			if(tmp_board[tmp_y][tmp_x] == 1)
			{
				
				x = tmp_x;
				y = tmp_y;
				
				break;
			}
		}
		if(x != -1)
			break;
	}
	
	//cout<<tmp_y<<tmp_x<<endl;
	int ret = 0;
	

	for(int i=0;i<4;++i)
	{
		if( (y+y_1[i]<0 || y+y_1[i]>=H) || (y+y_2[i]<0 || y+y_2[i]>=H) || (y+y_3[i]<0 || y+y_3[i]>=H))
			continue;
		if( (x+x_1[i]<0 || x+x_1[i]>=W) || (x+x_2[i]<0 || x+x_2[i]>=W) || (x+x_3[i]<0 || x+x_3[i]>=W))
			continue;
		if(tmp_board[y+y_1[i]][x+x_1[i]] == 1 && tmp_board[y+y_2[i]][x+x_2[i]] == 1 && tmp_board[y+y_3[i]][x+x_3[i]] == 1)
		{
			tmp_board[y+y_1[i]][x+x_1[i]] =0;tmp_board[y+y_2[i]][x+x_2[i]] =0; tmp_board[y+y_3[i]][x+x_3[i]] =0;
			
			for(int j=0;j<H;++j)
			{
				for(int k=0;k<W;++k)
					cout<<tmp_board[j][k];
				cout<<endl;
			}	
			cout<<endl;
			ret += cover(tmp_board);
			tmp_board[y+y_1[i]][x+x_1[i]] =1;tmp_board[y+y_2[i]][x+x_2[i]] =1; tmp_board[y+y_3[i]][x+x_3[i]] =1;
		}
	}

	return ret;
}